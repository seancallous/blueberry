#!/bin/bash

DATA_PATH="$HOME/blueberry/sandbox/data.txt"
WINDOW_NAME="lantern"

#_init() {
#  xdotool search --onlyvisible --classname $WINDOW_NAME windowunmap \
#    || xdotool search --classname $WINDOW_NAME windowmap \
#    || st -n $WINDOW_NAME -a -g "35x7+0+0" -e "$0" "$@"
##  st -n $WINDOW_NAME -a -g "35x7+0+0" -e "$0" "$@"
#}

data=$(cat "$DATA_PATH")
d="    "
gray="\x1b[30m"
escape="\x1b[0m"

_fzf() {
  fzf --ansi --print-query --no-sort --with-nth='2,3' --nth='1' -d "$d" \
    --bind=change:top --reverse --no-info --margin 2 --prompt="$ " \
    --color="bg:-1,bg+:-1,gutter:-1,hl:15,hl+:15,fg:7,fg+:7,prompt:2,pointer:8,header:7,preview-fg:8" \
    --expect=ctrl-a,ctrl-d
    "$@"
}

_decide() {
  if [[ -d $(get_abspath "$1") ]]; then
    echo "cd"
  elif [[ -f $(get_abspath "$1") ]]; then
    echo "edit"
  elif [[ $(which "$1" &>/dev/null && echo $?) == 0 ]]; then
    echo "term"
  elif \
    [[ "$1" == *".com" ]] || [[ "$1" == *".com/"* ]] || \
    [[ "$1" == *".net" ]] || [[ "$1" == *".net/"* ]] || \
    [[ "$1" == *".ru" ]] || [[ "$1" == *".ru/"* ]] || \
    [[ "$1" == *".su" ]] || [[ "$1" == *".su/"* ]] || \
    [[ "$1" == *".cc" ]] || [[ "$1" == *".cc/"* ]]; then
    echo "web"
  elif [[ "$1" == "r/"* ]]; then
    echo "reddit"
  else
    echo "term"
  fi
}

_run() {
  _l() {
    exec setsid -f "$@"
  }

  # black magic
  case "$2" in
    "cd")
      _l st -e sh -c "cd $1 ; exec bash" &
      wait ; exit 0 ;;
    "term")
      _l st -e sh -c "$1 ; exec bash" &
      wait ; exit 0 ;;
    "web")
      _l brave "$1" ;;
    "reddit")
      _l brave "https://old.reddit.com/$1" ;;
    "edit")
      _l st -e sh -c "nvim $1 ; exec bash" ;;
    *) sleep 1s ;;
  esac
}

_main() {
  out=$(echo -e "$data" | _fzf)
  mapfile -t out <<< "$out"
  query="${out[0]}"
  key="${out[1]}"
  selection="${out[2]}"

  if [[ "$key" == "ctrl-d" ]]; then
    data=$(sed "/^.*${index}${d}${entry}/d" <<< "$data")
    exit 0
  elif [[ "$key" == "ctrl-a" ]]; then
    selection=""
  fi

  if [[ "$selection" != "" ]]; then
    index=$(awk -F"$d" '{print $1}' <<< "$selection")
    entry=$(awk -F"$d" '{print $2}' <<< "$selection")
    action=$(awk -F"$d" '{print $3}' <<< "$selection")

    # increment index $((index+1))
    data=$(sed "s+^.*\(${d}${entry}\)+$((index+1))\1+g" <<< "$data")
    # sort and remove duplicates
    data=$(echo "$data" | sort -k1,1nr | awk -F"$d" '!x[$2]++')
    # write back to the file
    echo "$data" > "$DATA_PATH"

    _run "$entry" "$action"

  elif [[ "$query" != "" ]]; then

    action=$(_decide "$query")

    clear
    if ! ask "$query > $action"; then
      exit 0
    fi

    # write to data
    data+="
1${d}${query}${d}${gray}${action}${escape}"
    echo "$data" > "$DATA_PATH"

    _run "$query" "$action"
  fi
}

#cat "$DATA_PATH"

get_abspath() {
  echo "$(realpath -m --no-symlinks ${1/"~"/$HOME})"
}

ask() {
  echo
  echo -e "$1 [y/n] | \c"
  read -n 1 -r < /dev/tty # lack of redirect breaks the function in a while loop
  echo
  case "$REPLY" in
    Y|y) true ;;
    N|n) false ;;
    *)
      false
      echo "please enter a valid choice"
      ask "$1"
      ;;
  esac
}

_main

#[[ "$1" == "" ]] && _init wooooo || _main
