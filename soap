#!/bin/bash

read -d '' bundles << EOF
xorg:          xorg-server xorg-xinit xterm
pulseaudio:    pulseaudio pulseaudio-alsa alsa-utils
dev:           cmake lua
bspwm:         bspwm lemonbar-xft picom sxhkd xtitle xdo xdotool
neovim:        neovim python2-pip python-pip
media:         mpv
cli:           fzf cat
fonts:         tamzen-font-git
pip:           pynvim
EOF
#pip2:          pynvim

# paths on the left are relative to script's directory
read -d '' links << EOF
bashrc                        ~/.bashrc
aliases                       ~/.aliases
bash_profile                  ~/.bash_profile
xinitrc                       ~/.xinitrc
Xresources                    ~/.Xresources
polybar                       ~/.config/polybar/config
bspwmrc                       ~/.config/bspwm/bspwmrc
sxhkdrc                       ~/.config/sxhkd/sxhkdrc
vimrc                         ~/.vimrc
vim/nvim_init.vim             ~/.config/nvim/init.vim
picom                         ~/.config/picom.conf
EOF

read -d '' directories << EOF
~/blueberry
EOF

script_dir="${0%/*}"

opt_dry="yes"
opt_packages="no"
opt_vim="no"

# ===================================
# functions
# ===================================

fzf_edit() {
  current_dir=$(pwd 2>&1)
  cd "$script_dir"
  selected_file=$(find . -type f ! -path "*/.git*/*" ! -path "*/sl/*" ! -path "*/fonts/*" \
    | cut -c 3- \
    | fzf --no-bold --reverse --preview="bat --color=always --style=numbers --line-range :69 {}" \
      --preview-window=right:70%)
  if [[ $selected_file != "" ]]; then
    $EDITOR $selected_file
    log "$" "$green" "soap" "$EDITOR $selected_file"
  fi
  cd "$current_dir"
}

create_directories() {
  while read -r path; do
    abs_path=$(get_abspath $path)
    [[ ! -d "$abs_path" ]] && run_command "+" "$path" "mkdir -p $abs_path"
  done <<< "$directories"
}

install_packages() { # cherry pick packages that aren't already installed
  while read -r bundle; do
    bundle=($bundle) # removing this breaks everything
    name=${bundle[0]%?} # removes the colon
    clean_bundle=""
    case "$name" in
      pip|pip2)
        install_cmd="sudo $name install -q"
        for package in "${bundle[@]:1}"; do
          ! python -c "import $package" &> /dev/null && clean_bundle="$clean_bundle$package "
        done
        ;;
      *)
        install_cmd="yay -S --needed --noconfirm"
        for package in "${bundle[@]:1}"; do # :1 skips the first element (name)
          ! yay -Qs $package > /dev/null && clean_bundle="$clean_bundle$package "
        done
        ;;
    esac
    [[ "$clean_bundle" != "" ]] && run_command "$" "$name" "$install_cmd $clean_bundle"
  done <<< "$bundles"
}

create_symlinks() {
  while read -r line; do
    sleep 0.03
    line=($line)
    src=${line[0]}
    dst=${line[1]}
    if [[ "$dst" == "" ]]; then
      log "#" "$red" "$src" "broken rule!"
      continue
    fi
    abs_src="${script_dir}/$src"
    abs_dst=$(get_abspath "$dst")

    if [[ -f "$abs_src" ]]; then
      if [[ ! -f "$abs_dst" && ! -L "$abs_dst" ]]; then # if both are okay, proceed normally
        [[ ! -d "${abs_dst%/*}" ]] && run_command "+" "${abs_dst%/*}" "mkdir -p ${abs_dst%/*}"
        run_command ">" "$src" "ln -s $abs_src $abs_dst"
      else # resolve conflicts
        if [[ -f "$abs_dst" && ! -L "$abs_dst" ]]; then
          if ask "$src" "attempt to override a non-symlink $dst, confirm?"; then
              run_command "." "$src" "ln -sf $abs_src $abs_dst"
          elif ask "soap" "mv $dst $script_dir && ln -s $src $dst?"; then
            run_command ">" "$dst" "mv $abs_dst $script_dir"
            run_command "." "$src" "ln -s $abs_src $abs_dst"
          else
            log "#" "$yellow" "$src" "skipping..."
          fi
        elif [[ -L "$abs_dst" ]]; then
          if [[ $(readlink -f "$abs_dst") == "$abs_src" ]]; then
            log "." "$green" "$src" "== readlink -f $abs_dst"
          else
            run_command "." "$src" "ln -sfn $abs_src $abs_dst"
          fi
        fi
      fi
    else
      log "#" "$red" "$src" "missing source file!"
    fi
  done <<< "$links"
}

update() {
  clear
  opt_dry="no"
  current_dir=$(pwd 2>&1)
  welcome
  echo
  cd "$script_dir"

  if [[ -f "$(get_abspath ~/.git-credentials)" ]]; then
    log "i" "$yellow" "git" "credential store enabled"
  else
    log "#" "$red" "soap" "the following option is extremely insecure!"
    if ask "git" "enable credential store?"; then
      run_command "$" "soap" "git config credential.helper store"
    fi

    if ! git config --list | grep -q "user.email"; then
      log "?" "$yellow" "git" "please enter user.email | \c"
      echo -ne "$escape"
      read useremail
      run_command "$" "soap" "git config --global user.email $useremail"
    fi

    if ! git config --list | grep -q "user.name"; then
      log "?" "$yellow" "git" "please enter user.name | \c"
      echo -ne "$escape"
      read username
      run_command "$" "soap" "git config --global user.name $username"
    fi
  fi

  if ping -q -c 1 -w 1 google.com >/dev/null 2>&1; then
    run_command "$" "soap" "git fetch"
    git_status=$(git status 2>&1)
    log "+" "$green" "soap" "git status"
    if [[ "$git_status" == *"behind"* ]]; then
      if ask "we're behind" "pull?"; then
        run_command "$" "soap" "git pull"
      fi
    elif [[ "$git_status" == *"ahead"* || "$git_status" == *"hanges not staged for commit:"* ]]; then
      if ask "we're ahead" "push?"; then
        run_command "$" "soap" "git add ."
        log "?" "$yellow" "commit" "enter a message | \c"
        echo -ne "$escape"
        read commit_message
        git commit -m "$commit_message"
        log "+" "$green" "soap" "git commit -m $commit_message"
        run_command "$" "soap" "git push"
      fi
    else
      log "i" "$green" "soap" "up to date <3"
    fi
  else
    log "#" "$red" "soap" "no internet connection"
  fi
  cd "$current_dir"
}

# ===================================
# helpers
# ===================================

get_abspath() {
  echo "$(realpath -m --no-symlinks ${1/"~"/$HOME})"
}

log() { # $1 - icon, $2 - color, $3 - object, $4 - action
  color="$2"
  [[ "$color" == "$green" ]] && [[ "$opt_dry" == "yes" ]] && color="$gray"
  echo -e "${escape}[${color}${1}${escape}] ${3}: ${gray}${4}${escape}"
}

get_cpos() {
  exec < /dev/tty
  oldstty=$(stty -g)
  stty raw -echo min 0
  echo -en "\033[6n" > /dev/tty
  IFS=';' read -r -d R -a pos
  stty $oldstty
  # change from one-based to zero based so they work with: tput cup $row $col
  row=$((${pos[0]:2} - 1))    # strip off the esc-[
  col=$((${pos[1]} - 1))
  echo $row
}

run_command() { # $1 - icon, $2 - object, $3 - action
  if [[ $opt_dry == "no" ]]; then
    sc1=$(get_cpos)
    log "$1" "$green" "$2" "$3"
    out=$($3 2>&1)
    if [[ $? -eq 0 ]]; then
      sc2=$(get_cpos)
      tput cup "$sc1" 0
      echo -e "$escape[$green+$escape]"
      tput cup "$sc2" 0
    else
      sc2=$(get_cpos)
      tput cup "$sc1" 0
      echo -e "$escape[$red#$escape]"
      tput cup "$sc2" 0
      echo "$out"
    fi
  else
    log "$1" "$green" "$2" "$3"
  fi
}

ask() {
  log "?" "$yellow" "$1" "$2 [y/n] | \c"
  echo -ne "$escape"
  read -n 1 -r < /dev/tty # lack of redirect breaks the function in a while loop
  echo
  case "$REPLY" in
    Y|y) true ;;
    N|n) false ;;
    *)
      false
      log "i" "$gray" "soap" "please enter a valid choice"
      ask "$1" "$2"
      ;;
  esac
}

# ===================================
# init
# ===================================

red="\x1b[31m"
green="\x1b[32m"
yellow="\x1b[33m"
blue="\x1b[34m"
gray="\x1b[90m"
escape="\x1b[0m"

#black="\u001b[30m"
#red="\u001b[31m"
#green="\u001b[32m"
#yellow="\u001b[33m"
#blue="\u001b[34m"
#magenta="\u001b[35m"
#cyan="\u001b[36m"
#white="\u001b[37m"
#
#bblack="\u001b[30;1m"
#bred="\u001b[31;1m"
#bgreen="\u001b[32;1m"
#byellow="\u001b[33;1m"
#bblue="\u001b[34;1m"
#bmagenta="\u001b[35;1m"
#bcyan="\u001b[36;1m"
#bwhite="\u001b[37;1m"
#
#escape="\u001b[0m"

welcome() {
  echo -e "
   ____    ___      __     _____    
  /',__\  / __'\  /'__'\  /\ '__'\  
 /\__, '\/\ \L\ \/\ \L\.\_\ \ \L\ \ 
 \/\____/\ \____/\ \__/.\_\  \ ,__/ 
  \/___/  \/___/  \/__/\/_/ \ \ \/  
                             \ \_\  
                              \/_/  "
}

usage="usage: bb {install|dry|update|edit} [-p] [-v]

perform:
   i, install     perform installation
   d, dry         just print without running
   u, update      sync to or from a git repo
   e, edit        fzf into $EDITOR in the script location
                  runs when no arguments are given
install:
  -p       install package bundles
  -v       set up nvim via plug"

if [[ $# -eq 0 || $1 == "e" || $1 == "edit" ]]; then
  # launch fzf if no arguments are supplied
  opt_dry="no"
  if [[ -f /usr/bin/fzf ]]; then
    fzf_edit
  else
    log "i" "$yellow" "fzf" "not found"
    if ask "soap" "install it?"; then
      run_command "$" "fzf" "sudo pacman -S fzf --noconfirm"
      echo ""
      fuzzy_edit
    fi
  fi
  exit 1
else
  case $1 in # the first agrument has to be an action
    i|install)
      opt_dry="no";;
    d|dry)
      opt_dry="yes";;
    u|update)
      update
      exit 1;;
    h|help|*)
      echo "$usage"
      exit 1;;
  esac
  OPTIND=2 # makes getopts parse arguments starting from the second
  while getopts "pv" opt; do
    case $opt in
      p) opt_packages="yes";;
      v) opt_vim="yes";;
      *)
        echo "$usage"
        exit 1;;
    esac
  done
fi

# ===================================
# calls
# ===================================

clear
welcome

# ask for sudo
if [[ "$opt_dry" == "no" ]]; then
  log "+" "$green" "soap" "sudo -v"
  sudo -v
fi

# add color to pacman
if grep -Fqx "#Color" "/etc/pacman.conf"; then
  run_command "$" "soap" "sudo sed -i -e s/#Color/Color/g /etc/pacman.conf"
fi

# install yay if needed
if [[ ! -f /usr/bin/yay ]]; then # not sure if yay is a dir, check
  run_command "$" "soap" "git clone https://aur.archlinux.org/yay.git"
  run_command "$" "soap" "cd yay"
  run_command "$" "soap" "makepkg -si --noconfirm"
  run_command "$" "soap" "cd .."
  run_command "$" "soap" 'rm -rf yay' # careful
  run_command "$" "soap" "yay -Syu"
fi

# install/update system wide adblock
[[ ! -f /etc/hosts_bk ]] && run_command "$" "hosts" "sudo cp /etc/hosts /etc/hosts_bk"
run_command "$" "hosts" "sudo curl -sS https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts -o /etc/hosts"

# install/update z.lua
run_command "$" "z.lua" "curl -sS --create-dirs https://raw.githubusercontent.com/skywind3000/z.lua/master/z.lua -o ${script_dir}/sc/z.lua)"

create_directories
[[ "$opt_packages" == "yes" ]] && install_packages
if [[ "$opt_vim" == "yes" ]]; then
  [[ ! -f ~/.local/share/nvim/site/autoload/plug.vim ]] && run_command "$" "nvim" "curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  nvim +:PlugInstall +:qa
  log "+" "$green" "nvim" "nvim +:PlugInstall +:qa"
  #run_command "$" "nvim" "nvim +:PlugInstall +:qa"
fi

create_symlinks

if [[ "$opt_dry" == "no" ]]; then
  log "$" "$green" "soap" "all done <3"
else
  log "$" "$gray" "soap" "dry run complete"
fi
