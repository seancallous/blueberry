#!/bin/bash

read -d '' bundles << EOF
xorg:          xorg-server xorg-xinit xterm
pulseaudio:    pulseaudio pulseaudio-alsa alsa-utils
dev:           cmake lua
bspwm:         bspwm sxhkd xtitle xdo xdotool
neovim:        neovim python2-pip python-pip
media:         mpv
cli:           fzf cat
fonts:         tamzen-font-git
pip:           pynvim
pip2:          pynvim
EOF

read -d '' links << EOF
bashrc                        ~/.bashrc
aliases                       ~/.aliases
bash_profile                  ~/.bash_profile
xinitrc                       ~/.xinitrc
Xresources                    ~/.Xresources
polybar                       ~/.config/polybar/config
bspwmrc                       ~/.config/bspwm/bspwmrc
sxhkdrc                       ~/.config/sxhkd/sxhkdrc
vimrc                         ~/.vimrc
vim/nvim_init.vim             ~/.config/nvim/init.vim
picom                         ~/.config/picom.conf
EOF

read -d '' directories << EOF
~/blueberry
EOF

opt_dry="yes"
opt_packages="no"
opt_vim="no"

# -------------------------------------------------

fzf_edit() {
  current_dir=$(pwd 2>&1)
  cd ~/blueberry
  selected_file=$(find . -type f ! -path "*/.git*/*" ! -path "*/sl/*" ! -path "*/fonts/*" \
    | cut -c 3- \
    | fzf --no-bold --reverse --preview="bat --color=always --style=numbers --line-range :69 {}" \
      --preview-window=right:70%)
  if [[ $selected_file != "" ]]; then
    run_command "$" "soap" "$EDITOR $selected_file"
  fi
  cd "$current_dir"
}

install_packages() {
  while read -r bundle; do
    bundle=($bundle) # removing this breaks everything
    name=${bundle[0]%?} # removes the colon

    if [[ $name == pip ]]; then
      cmd="sudo pip install -q"
    elif [[ $name == pip2 ]]; then
      cmd="sudo pip2 install -q"
    else
      cmd="yay -S --needed --noconfirm"
    fi

    if [[ $name != pip ]] && [[ $name != pip2 ]]; then
      # only pick packages that aren't already installed
      clean_bundle=""
      for package in "${bundle[@]:1}"; do # :1 skips the first element (name)
        if ! yay -Qs $package > /dev/null ; then
          clean_bundle="$clean_bundle$package "
        fi
      done
      # install w/ one command if there are any to install
      if [[ "$clean_bundle" != "" ]]; then
        run_command "$" "$name" "$cmd $clean_bundle"
      fi
    else
      for package in "${bundle[@]:1}"; do
        run_command "$" "$name" "$cmd $package"
      done
    fi
  done <<< "$bundles"
}

# helpers -------------------------

log() { # $1 - icon, $2 - color, $3 - object, $4 - action
  printf "%b%s\n" "[${2}${1}${escape}] ${3}: ${gray}${4}${escape}"
  #printf "\r%*s\r%s\n" $(tput cols) "${gray}$4${escape} " "[${2}${1}${escape}] $3 ";
}

run_command() { # $1 - icon, $2 - object, $3 - action
  if [[ "$opt_dry" == "no" ]]; then
    log "$1" "$green" "$2" "$3"
  else
    log "$1" "$gray" "$2" "$3"
  fi
}

# init -------------------------------------

red="\x1b[31m"
green="\x1b[32m"
yellow="\x1b[33m"
blue="\x1b[34m"
gray="\x1b[90m"
escape="\x1b[0m"

clear

welcome() {
  echo -e "
     ____    ___      __     _____    
    /',__\  / __'\  /'__'\  /\ '__'\  
   /\__, '\/\ \L\ \/\ \L\.\_\ \ \L\ \ 
   \/\____/\ \____/\ \__/.\_\  \ ,__/ 
    \/___/  \/___/  \/__/\/_/ \ \ \/  
                               \ \_\  
                                \/_/  
  "
}

usage="usage: bb {install|dry|update|edit} [-p] [-v]

perform:
   i, install     perform installation
   d, dry         just print without running
   u, update      sync to or from a git repo
   e, edit        fzf into $EDITOR in the script location
                  runs when no arguments are given
install:
  -p       install package bundles
  -v       set up nvim via plug"

if [[ $# -eq 0 || $1 == "e" || $1 == "edit" ]]; then
  # launch fzf if no arguments are supplied
  if [[ -f /usr/bin/fzf ]]; then
    fzf_edit
  else
    log "i" $yellow "fzf" "not found"
    if ask_user "install it?"; then
      run_command "$" "fzf" "sudo pacman -S fzf --noconfirm"
      echo ""
      fuzzy_edit
    fi
  fi
  exit 1
else
  case $1 in # the first agrument has to be an action
    i|install)
      opt_dry=no;;
    d|dry)
      opt_dry=yes;;
    u|update)
      update
      exit 1;;
    h|help|*)
      echo "$usage"
      exit 1;;
  esac
  OPTIND=2 # makes getopts parse arguments starting from the second
  while getopts "pv" opt; do
    case $opt in
      p) opt_packages=yes;;
      v) opt_vim=yes;;
    esac
  done
fi

# actual program --------------------

welcome

# ask for sudo
if [[ "$opt_dry" == "no" ]]; then
  run_command "$" "soap" "sudo -v"
fi

# add color to pacman
if grep -Fqx "#Color" "/etc/pacman.conf"; then
  run_command "$" "soap" "sudo sed -i -e s/#Color/Color/g /etc/pacman.conf"
fi

# install yay if needed
if [[ ! -f /usr/bin/yay ]]; then # not sure if yay is a dir, check
  run_command "$" "soap" "git clone https://aur.archlinux.org/yay.git"
  run_command "$" "soap" "cd yay"
  run_command "$" "soap" "makepkg -si --noconfirm"
  run_command "$" "soap" "cd .."
  run_command "$" "soap" 'rm -rf yay' # careful
  run_command "$" "soap" "yay -Syu"
fi

# install/update system wide adblock
if [[ ! -f /etc/hosts_bk ]]; then
  run_command "$" "hosts" "sudo cp /etc/hosts /etc/hosts_bk"
fi
run_command "$" "hosts" "sudo curl -sS https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts -o /etc/hosts"

# install/update z.lua
run_command "$" "z.lua" "curl -sS --create-dirs https://raw.githubusercontent.com/skywind3000/z.lua/master/z.lua -o /home/blueberry/sc/z.lua)"

#create_directories

if [[ "$opt_packages" == "yes" ]]; then
  install_packages
fi

if [[ "$opt_vim" == "yes" ]]; then
  run_command "$" "nvim" "nvim +:PlugInstall +:qa"
fi

#create_symlinks

if [[ "$opt_dry" == "no" ]]; then
  log "$" "$green" "soap" "all done :]"
else
  log "$" "$gray" "soap" "dry run complete"
fi
